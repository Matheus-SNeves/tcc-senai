generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Empresa {
  id         Int           @id @default(autoincrement())
  nome       String        @db.VarChar(255)
  cnpj        String   @unique @db.VarChar(18)
  email      String        @db.VarChar(255) @unique
  produtos   Produto[]
  empregados Funcionario[]
  enderecos  Endereco[]
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
}

enum UserRole {
  CLIENTE
  ADMIN
}

enum tiposProd {
  acougue
  bebidas
  frios
  higiene
  hortifruti
  laticinios
  limpeza
  padaria
}

model Produto {
  id             Int           @id @default(autoincrement())
  nome           String        @db.VarChar(255)
  preco          Float
  quantidade     Int
  descricao      String        @db.VarChar(255)
  id_supermercado Int
  supermercado   Empresa       @relation(fields: [id_supermercado], references: [id])
  pedidos        ItensPedido[]
  avaliacoes     Avaliacao[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model TipoEmprego {
  id            Int           @id @default(autoincrement())
  nome          String        @db.VarChar(255)
  salario       Float
  carga_horaria Int
  descricao     String        @db.VarChar(255)
  role          tiposProd
  empregados    Funcionario[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Funcionario {
  id                Int         @id @default(autoincrement())
  nome              String      @db.VarChar(255)
  cpf               String      @db.VarChar(11)
  telefone          String      @db.VarChar(15)
  email             String      @db.VarChar(255) @unique 
  senha             String      
  role              UserRole    @default(ADMIN) 
  id_empresa        Int
  id_tipo_empregado Int
  empresa           Empresa     @relation(fields: [id_empresa], references: [id])
  tipo_empregado    TipoEmprego @relation(fields: [id_tipo_empregado], references: [id])
  enderecos         Endereco[]
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

model Cliente {
  id         Int         @id @default(autoincrement())
  nome       String      @db.VarChar(255)
  cpf        String      @db.VarChar(11) @unique
  telefone   String      @db.VarChar(15) @unique
  email      String      @db.VarChar(255) @unique
  senha      String      
  role       UserRole    @default(CLIENTE) 
  enderecos  Endereco[]
  pedidos    Pedido[]
  avaliacoes Avaliacao[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}


model Endereco {
  id            Int          @id @default(autoincrement())
  cep           String       @db.VarChar(8)
  logradouro    String       @db.VarChar(255)
  numero        String       @db.VarChar(10)
  complemento   String       @db.VarChar(255)
  bairro        String       @db.VarChar(255)
  id_cliente    Int?
  id_empresa    Int?
  id_funcionario Int?
  empresa       Empresa?     @relation(fields: [id_empresa], references: [id])
  cliente       Cliente?     @relation(fields: [id_cliente], references: [id])
  funcionario   Funcionario? @relation(fields: [id_funcionario], references: [id])
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

enum TipoPagamento {
  PIX
  DINHEIRO
  DEBITO
  CREDITO
}

model Pedido {
  id           Int           @id @default(autoincrement())
  id_cliente   Int
  data_pedido  DateTime      @default(now())
  valor        Float
  cliente      Cliente       @relation(fields: [id_cliente], references: [id])
  itens_pedido ItensPedido[]
  pagamentos   Pagamento[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model ItensPedido {
  id         Int      @id @default(autoincrement())
  id_pedido  Int
  id_produto Int
  quantidade Int
  pedido     Pedido   @relation(fields: [id_pedido], references: [id])
  produto    Produto  @relation(fields: [id_produto], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Pagamento {
  id             Int           @id @default(autoincrement())
  id_pedido      Int
  tipo           TipoPagamento
  data_pagamento DateTime      @default(now())
  pedido         Pedido        @relation(fields: [id_pedido], references: [id])
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Avaliacao {
  id             Int      @id @default(autoincrement())
  id_cliente     Int
  id_produto     Int
  nota           Int  
  comentario     String   @db.VarChar(255)
  data_avaliacao DateTime @default(now())
  cliente        Cliente  @relation(fields: [id_cliente], references: [id])
  produto        Produto  @relation(fields: [id_produto], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}
